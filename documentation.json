{
  "pipes": [],
  "interfaces": [
    {
      "name": "DropDownOption",
      "id": "interface-DropDownOption-2415affdeb5bdbaf68abc0504c25519872a7ee28db91cbdacd7f45ef01d0f819049d1d3de90d49c2f2a0cca5f00b7f1c6f833e359d430bff4130391051fbda63",
      "file": "src/app/modules/drop-down/interfaces/drop-down-options.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export default interface DropDownOption {\n  /**\n   * Идентификатор\n   */\n  id: number;\n\n  /**\n   * Значение\n   */\n  value: string;\n\n  /**\n   * Опора рендеринга\n   */\n  key?: number;\n}\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Идентификатор</p>\n",
          "line": 8,
          "rawdescription": "\n\nИдентификатор\n"
        },
        {
          "name": "key",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": true,
          "description": "<p>Опора рендеринга</p>\n",
          "line": 18,
          "rawdescription": "\n\nОпора рендеринга\n"
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Значение</p>\n",
          "line": 13,
          "rawdescription": "\n\nЗначение\n"
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "description": "<p>Опция выпадающего списка</p>\n",
      "rawdescription": "\n\nОпция выпадающего списка\n",
      "methods": []
    },
    {
      "name": "EntityName",
      "id": "interface-EntityName-8444721df4a63a072e919b541eb143bd8f62564e4ddd6589dc0016de0a9edbd9633847a284af6118ccd28cd2c3774289192bacafc93600298ad1a1f5a1edbb77",
      "file": "src/app/shared/models/entity-name.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export default interface EntityName {\r\n  id: number;\r\n  name: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "Option",
      "id": "interface-Option-8f5d9695d426c971fcd6ebb15b07707f76fc6fb2b3726c3ac35459a1b69662930bdebdd0f18b0ac09908f0754955e9d99d1ae71325df29faf10e313ea6b545a2",
      "file": "src/app/common/button/select-button/model/option.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import EntityName from 'app/shared/models/entity-name';\r\n\r\nexport default interface Option extends EntityName {\r\n  inactive?: boolean;\r\n}\r\n",
      "properties": [
        {
          "name": "inactive",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": [],
      "extends": "EntityName"
    },
    {
      "name": "ScrollSettings",
      "id": "interface-ScrollSettings-5c55f9f3f16b0c871ac45a76558383875501073c91511e6ba06c9c61b598551d5292925894d73d6adec96657fb962b8de3e5a3756f88e289ed13c7b7276912c2",
      "file": "src/app/modules/drop-down/interfaces/scroll-settings.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "import ViewportBoundaries from './viewport-boundaries.interface';\n\n/**\n * Настройки скроллинга\n */\nexport default interface ScrollSettings {\n  /**\n   * Класс выпадающей панели\n   */\n  className: string;\n\n  /**\n   * Номер активного элемента\n   */\n  activeElementNumber: number;\n\n  /**\n   * Границы просмотра\n   */\n  viewportBoundaries?: ViewportBoundaries;\n\n  /**\n   * Флаг раскрытости панели\n   */\n  active?: boolean;\n}\n",
      "properties": [
        {
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": true,
          "description": "<p>Флаг раскрытости панели</p>\n",
          "line": 25,
          "rawdescription": "\n\nФлаг раскрытости панели\n"
        },
        {
          "name": "activeElementNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Номер активного элемента</p>\n",
          "line": 15,
          "rawdescription": "\n\nНомер активного элемента\n"
        },
        {
          "name": "className",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Класс выпадающей панели</p>\n",
          "line": 10,
          "rawdescription": "\n\nКласс выпадающей панели\n"
        },
        {
          "name": "viewportBoundaries",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ViewportBoundaries",
          "optional": true,
          "description": "<p>Границы просмотра</p>\n",
          "line": 20,
          "rawdescription": "\n\nГраницы просмотра\n"
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "description": "<p>Настройки скроллинга</p>\n",
      "rawdescription": "\n\nНастройки скроллинга\n",
      "methods": []
    },
    {
      "name": "TableModel",
      "id": "interface-TableModel-7023ed0c4d6cb672e2a982bdfe85d3bb3013a1698cd42c79b3acbcc04192e5574e40456179927147f8d526754a7c8d8f7392a73775981e986176bc9cfa9a7cdf",
      "file": "src/app/shared/models/table.model.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export interface TableModel {\r\n  id: number;\r\n  name: string;\r\n  type: string;\r\n  text: string;\r\n}\r\n",
      "properties": [
        {
          "name": "id",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "",
          "line": 2
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 3
        },
        {
          "name": "text",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 5
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "",
          "line": 4
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "methods": []
    },
    {
      "name": "ViewportBoundaries",
      "id": "interface-ViewportBoundaries-f7c0799c0b742fcf91119a1f1214edfe6383eb6e61bf891cc95dca8dd8d704704e3fbecab1868a826643fab28c3e9a352090be5b1bb2c414bf2431f41fefb090",
      "file": "src/app/modules/drop-down/interfaces/viewport-boundaries.interface.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "interface",
      "sourceCode": "export default interface ViewportBoundaries {\n  /**\n   * Номер начального элемента\n   */\n  start: number;\n\n  /**\n   * Номер последнего элемента\n   */\n  end: number;\n}\n",
      "properties": [
        {
          "name": "end",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Номер последнего элемента</p>\n",
          "line": 13,
          "rawdescription": "\n\nНомер последнего элемента\n"
        },
        {
          "name": "start",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Номер начального элемента</p>\n",
          "line": 8,
          "rawdescription": "\n\nНомер начального элемента\n"
        }
      ],
      "indexSignatures": [],
      "kind": 165,
      "description": "<p>Границы вьюпорта</p>\n",
      "rawdescription": "\n\nГраницы вьюпорта\n",
      "methods": []
    }
  ],
  "injectables": [
    {
      "name": "DataService",
      "id": "injectable-DataService-6fc53e37899cc936a4b8ba3d6b35c18d9fad32eb43eee9f7ffe84e332e4cb62a71c8019373b7c01b859c942eb525d7d18012bf55e60bdebaaed0e5af40bc2a3d",
      "file": "src/app/shared/data.service.ts",
      "properties": [],
      "methods": [],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataService {\n  constructor() {}\n}\n",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 6
      },
      "type": "injectable"
    },
    {
      "name": "DropDownService",
      "id": "injectable-DropDownService-2b419de4e81ffee4510d6cf042a8c23ba54271c1629e43a6afe65024c09b5d7175a331dbeec7ea919456fe4e4fdd1114bb4d50802ef815502eb5c69b9829c300",
      "file": "src/app/modules/drop-down/services/drop-down.service.ts",
      "properties": [
        {
          "name": "scrollSettingsSub",
          "defaultValue": "new Subject<ScrollSettings>()",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<ScrollSettings>",
          "optional": false,
          "description": "<p>Настройки скроллинга</p>\n",
          "line": 14,
          "rawdescription": "\n\nНастройки скроллинга\n",
          "modifierKind": [121]
        }
      ],
      "methods": [
        {
          "name": "updateScrollSettings",
          "args": [
            {
              "name": "settings",
              "type": "Partial<ScrollSettings>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОбновить настройки скроллинга\n",
          "description": "<p>Обновить настройки скроллинга</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "settings",
              "type": "Partial<ScrollSettings>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "description": "<p>Сервис выпадающего списка</p>\n",
      "rawdescription": "\n\nСервис выпадающего списка\n",
      "sourceCode": "import { Injectable } from '@angular/core';\nimport { map, Observable, Subject } from 'rxjs';\n\nimport ScrollSettings from '../interfaces/scroll-settings.interface';\n\n/**\n * Сервис выпадающего списка\n */\n@Injectable({ providedIn: 'root' })\nexport default class DropDownService {\n  /**\n   * Настройки скроллинга\n   */\n  private scrollSettingsSub: Subject<ScrollSettings> = new Subject<ScrollSettings>();\n\n  /**\n   * Получить настройки скроллинга\n   */\n  // public get scrollSetting(): Observable<ScrollSettings> {\n  //   return this.scrollSettingsSub.asObservable();\n  // }\n\n  /**\n   * Обновить настройки скроллинга\n   */\n  public updateScrollSettings(settings: Partial<ScrollSettings>) {\n    this.scrollSettingsSub.subscribe((previousSettings) => {\n      const scrollOptions = { ...previousSettings, ...settings };\n      this.scrollSettingsSub.next(scrollOptions);\n    });\n  }\n}\n",
      "type": "injectable"
    }
  ],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [
    {
      "name": "appAutoScrollElementDirective",
      "id": "directive-appAutoScrollElementDirective-4f0bd8ba575e444d75fe9811170ca595b4926280f7ed6d1e6d981bde103ea085eae57dd85d50122ac610f9231c77a6f68ab0b9761a4f243b1edb0dd470255520",
      "file": "src/app/modules/drop-down/directives/auto-scroll-element/auto-scroll-element.directive.ts",
      "type": "directive",
      "description": "<p>Директива управления полосой прокрутки</p>\n",
      "rawdescription": "\n\nДиректива управления полосой прокрутки\n",
      "sourceCode": "import { Directive, ElementRef, Input, Renderer2, AfterViewInit, OnChanges, SimpleChanges } from '@angular/core';\nimport ScrollDirection from '../../enums/scroll-direction.enum';\nimport ScrollSettings from '../../interfaces/scroll-settings.interface';\nimport ViewportBoundaries from '../../interfaces/viewport-boundaries.interface';\n\n/**\n * Директива управления полосой прокрутки\n */\n@Directive({\n  selector: '[appAutoScrollElement]',\n})\nexport default class appAutoScrollElementDirective implements AfterViewInit, OnChanges {\n  /**\n   * Привязка опций ползунка прокрутки\n   */\n  @Input() public set appAutoScrollElement(settings: ScrollSettings) {\n    this.scrollSettings = { ...this.scrollSettings, ...settings };\n  }\n\n  /**\n   * Опции ползунка прокрутки\n   */\n  public scrollSettings!: ScrollSettings;\n\n  /**\n   * Идентификатор предыдущего активного элемента\n   */\n  private prevActiveElementNumber!: number;\n\n  /**\n   * DOM-элемент ползунка прокрутки\n   */\n  private scrollElement!: HTMLElement;\n\n  /**\n   * Число видимых опций\n   */\n  private visibleElementsCount!: number;\n\n  /**\n   * Шаг ползунка прокрутки\n   */\n  private scrollStep!: number;\n\n  /**\n   * Конструктор\n   * @param host Приспособление над хост узлом элемента\n   * @param render Приспособление для работы с DOM\n   */\n  constructor(private host: ElementRef, private render: Renderer2) {}\n\n  public ngAfterViewInit(): void {\n    this.scrollElement = this.getScrollElement();\n    if (!this.scrollElement) {\n      return;\n    }\n    this.scrollStep = this.calculateScrollStep();\n    this.visibleElementsCount = this.calculateVisibleElementsCount();\n\n    if (this.scrollSettings.active) {\n      this.prevActiveElementNumber = this.scrollSettings.activeElementNumber;\n    }\n  }\n\n  public ngOnChanges(changes: SimpleChanges): void {\n    const { previousValue, currentValue } = changes['autoScrollElement'];\n    if (!this.scrollSettings.active) {\n      return;\n    }\n\n    setTimeout(() => {\n      const isActive = !previousValue?.action && currentValue.action;\n      if (isActive) {\n        this.setViewportBoundaries();\n      }\n      this.switchingDirectionScroll();\n    });\n  }\n\n  /**\n   * Переключение движения ползунка прокрутки в зависимости от направления\n   * @param keyCode Ключ клавиши перехода\n   */\n  private switchingDirectionScroll(): void {\n    const { activeElementNumber } = this.scrollSettings;\n    const start = 0;\n    const end = this.scrollElement?.childElementCount - 1;\n    const isOutsideBoundaries = activeElementNumber < start || activeElementNumber > end;\n\n    if (isOutsideBoundaries) {\n      this.prevActiveElementNumber = activeElementNumber;\n\n      return;\n    }\n    const scrollDirection =\n      this.prevActiveElementNumber < activeElementNumber ? ScrollDirection.bottom : ScrollDirection.top;\n    this.setNewScrollPosition(scrollDirection);\n    this.prevActiveElementNumber = activeElementNumber;\n  }\n\n  /**\n   * Получить DOM-элемент ползунка прокрутки\n   */\n  private getScrollElement(): HTMLElement {\n    const { nativeElement } = this.host;\n\n    return nativeElement.querySelector(`.${this.scrollSettings.className}`);\n  }\n\n  /**\n   * Вычислить шаг ползунка прокрутки\n   * @return number\n   */\n  private calculateScrollStep(): number {\n    const childCount = this.scrollElement.childElementCount;\n\n    return Math.trunc(this.scrollElement.scrollHeight / childCount);\n  }\n\n  /**\n   * Вычислить число видимых элементов прокрутки с учётом 0-го элемента\n   */\n  private calculateVisibleElementsCount(): number {\n    const result = Math.ceil(this.scrollElement.offsetHeight / this.scrollStep);\n\n    return result;\n  }\n\n  /**\n   * Содержится ли активный элемент в пределах границ вьюпорта ползунка прокрутки\n   * @param viewportBoundaries Границы вьюпорта\n   */\n  private isOutsideViewport(viewportBoundaries: ViewportBoundaries): boolean {\n    const { activeElementNumber } = this.scrollSettings;\n    const isOutsideTop = activeElementNumber < viewportBoundaries?.start;\n    const isOutsideBottom = activeElementNumber > viewportBoundaries?.end;\n\n    return isOutsideTop || isOutsideBottom;\n  }\n\n  /**\n   * Обновить границы вьюпорта ползунка прокрутки\n   * @param direction Направление движения\n   * @param prevViewportBoundaries Предыдущие границы вьюпорта\n   */\n  private updateViewportBoundaries(direction: ScrollDirection): void {\n    const { viewportBoundaries } = this.scrollSettings;\n    if (!viewportBoundaries) {\n      return;\n    }\n\n    const isOutsideViewport = this.isOutsideViewport(viewportBoundaries);\n    const increase = isOutsideViewport ? 1 : 0;\n    const step = direction === ScrollDirection.bottom ? increase : -increase;\n\n    this.scrollSettings.viewportBoundaries = {\n      start: viewportBoundaries.start + step,\n      end: viewportBoundaries.end + step,\n    };\n  }\n\n  /**\n   * Центрирование вьюпорта при инициализации списка с активным элементом\n   * @return ViewportBoundaries\n   */\n  private setViewportBoundaries(): void {\n    const { activeElementNumber } = this.scrollSettings;\n    const visibleElementsCount = this.visibleElementsCount - 1;\n    const elementsCount = this.scrollElement?.childElementCount - 1;\n    const half = Math.floor(visibleElementsCount / 2);\n\n    let boundaries;\n    if (activeElementNumber <= half) {\n      boundaries = {\n        start: 0,\n        end: visibleElementsCount,\n      };\n    } else if (activeElementNumber >= elementsCount - half) {\n      boundaries = {\n        start: elementsCount - visibleElementsCount,\n        end: elementsCount,\n      };\n    } else {\n      boundaries = {\n        start: activeElementNumber - half,\n        end: activeElementNumber + half,\n      };\n    }\n\n    this.scrollSettings.viewportBoundaries = boundaries;\n  }\n\n  /**\n   * Установить новую позицию ползунка прокрутки\n   * @param direction Направление прокрутки\n   */\n  private setNewScrollPosition(direction: ScrollDirection): void {\n    const scrollElement = this.getScrollElement();\n    if (!scrollElement) {\n      return;\n    }\n\n    this.updateViewportBoundaries(direction);\n    const scrollTop = this.scrollSettings.viewportBoundaries?.start || 1 * this.scrollStep;\n    this.render.setProperty(scrollElement, 'scrollTop', String(scrollTop));\n  }\n}\n",
      "selector": "[appAutoScrollElement]",
      "providers": [],
      "inputsClass": [
        {
          "name": "appAutoScrollElement",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nПривязка опций ползунка прокрутки\n",
          "description": "<p>Привязка опций ползунка прокрутки</p>\n",
          "line": 16,
          "type": "ScrollSettings",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "prevActiveElementNumber",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Идентификатор предыдущего активного элемента</p>\n",
          "line": 28,
          "rawdescription": "\n\nИдентификатор предыдущего активного элемента\n",
          "modifierKind": [121]
        },
        {
          "name": "scrollElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "HTMLElement",
          "optional": false,
          "description": "<p>DOM-элемент ползунка прокрутки</p>\n",
          "line": 33,
          "rawdescription": "\n\nDOM-элемент ползунка прокрутки\n",
          "modifierKind": [121]
        },
        {
          "name": "scrollSettings",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScrollSettings",
          "optional": false,
          "description": "<p>Опции ползунка прокрутки</p>\n",
          "line": 23,
          "rawdescription": "\n\nОпции ползунка прокрутки\n",
          "modifierKind": [123]
        },
        {
          "name": "scrollStep",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Шаг ползунка прокрутки</p>\n",
          "line": 43,
          "rawdescription": "\n\nШаг ползунка прокрутки\n",
          "modifierKind": [121]
        },
        {
          "name": "visibleElementsCount",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "number",
          "optional": false,
          "description": "<p>Число видимых опций</p>\n",
          "line": 38,
          "rawdescription": "\n\nЧисло видимых опций\n",
          "modifierKind": [121]
        }
      ],
      "methodsClass": [
        {
          "name": "calculateScrollStep",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 114,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nВычислить шаг ползунка прокрутки\n",
          "description": "<p>Вычислить шаг ползунка прокрутки</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 3172,
                "end": 3178,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 105,
                "escapedText": "return"
              },
              "comment": "<p>number</p>\n"
            }
          ]
        },
        {
          "name": "calculateVisibleElementsCount",
          "args": [],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 123,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nВычислить число видимых элементов прокрутки с учётом 0-го элемента\n",
          "description": "<p>Вычислить число видимых элементов прокрутки с учётом 0-го элемента</p>\n",
          "modifierKind": [121]
        },
        {
          "name": "getScrollElement",
          "args": [],
          "optional": false,
          "returnType": "HTMLElement",
          "typeParameters": [],
          "line": 104,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nПолучить DOM-элемент ползунка прокрутки\n",
          "description": "<p>Получить DOM-элемент ползунка прокрутки</p>\n",
          "modifierKind": [121]
        },
        {
          "name": "isOutsideViewport",
          "args": [
            {
              "name": "viewportBoundaries",
              "type": "ViewportBoundaries",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "boolean",
          "typeParameters": [],
          "line": 133,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСодержится ли активный элемент в пределах границ вьюпорта ползунка прокрутки\n",
          "description": "<p>Содержится ли активный элемент в пределах границ вьюпорта ползунка прокрутки</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 3712,
                "end": 3730,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "viewportBoundaries"
              },
              "type": "ViewportBoundaries",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3706,
                "end": 3711,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Границы вьюпорта</p>\n"
            }
          ]
        },
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "ngOnChanges",
          "args": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "changes",
              "type": "SimpleChanges",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setNewScrollPosition",
          "args": [
            {
              "name": "direction",
              "type": "ScrollDirection",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 197,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nУстановить новую позицию ползунка прокрутки\n",
          "description": "<p>Установить новую позицию ползунка прокрутки</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 5768,
                "end": 5777,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "direction"
              },
              "type": "ScrollDirection",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5762,
                "end": 5767,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Направление прокрутки</p>\n"
            }
          ]
        },
        {
          "name": "setViewportBoundaries",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 166,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nЦентрирование вьюпорта при инициализации списка с активным элементом\n",
          "description": "<p>Центрирование вьюпорта при инициализации списка с активным элементом</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "tagName": {
                "pos": 4870,
                "end": 4876,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "originalKeywordKind": 105,
                "escapedText": "return"
              },
              "comment": "<p>ViewportBoundaries</p>\n"
            }
          ]
        },
        {
          "name": "switchingDirectionScroll",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 84,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nПереключение движения ползунка прокрутки в зависимости от направления\n",
          "description": "<p>Переключение движения ползунка прокрутки в зависимости от направления</p>\n",
          "modifierKind": [121],
          "jsdoctags": []
        },
        {
          "name": "updateViewportBoundaries",
          "args": [
            {
              "name": "direction",
              "type": "ScrollDirection",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 146,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОбновить границы вьюпорта ползунка прокрутки\n",
          "description": "<p>Обновить границы вьюпорта ползунка прокрутки</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 4157,
                "end": 4166,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "direction"
              },
              "type": "ScrollDirection",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4151,
                "end": 4156,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Направление движения</p>\n"
            }
          ]
        }
      ],
      "implements": ["AfterViewInit", "OnChanges"],
      "constructorObj": {
        "name": "constructor",
        "description": "<p>Конструктор</p>\n",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "host",
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "render",
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 43,
        "rawdescription": "\n\nКонструктор\n",
        "jsdoctags": [
          {
            "name": {
              "pos": 1187,
              "end": 1191,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "host"
            },
            "type": "ElementRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 1181,
              "end": 1186,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>Приспособление над хост узлом элемента</p>\n"
          },
          {
            "name": {
              "pos": 1243,
              "end": 1249,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "render"
            },
            "type": "Renderer2",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 1237,
              "end": 1242,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>Приспособление для работы с DOM</p>\n"
          }
        ]
      },
      "accessors": {
        "appAutoScrollElement": {
          "name": "appAutoScrollElement",
          "setSignature": {
            "name": "appAutoScrollElement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "settings",
                "type": "ScrollSettings",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "rawdescription": "\n\nПривязка опций ползунка прокрутки\n",
            "description": "<p>Привязка опций ползунка прокрутки</p>\n",
            "jsdoctags": [
              {
                "name": "settings",
                "type": "ScrollSettings",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "AutoFocusDirective",
      "id": "directive-AutoFocusDirective-f71ed96ba8b03536a15bb9f6be535a26049c4cb085b9a484c1b66b6657654e417beea5463d14f38268f9aba53771131a6c5ba7b2ac47e45f4885a752ae23f64b",
      "file": "src/app/modules/drop-down/directives/auto-focus/auto-focus.directive.ts",
      "type": "directive",
      "description": "<p>Директива установки фокуса</p>\n",
      "rawdescription": "\n\nДиректива установки фокуса\n",
      "sourceCode": "import { Directive, ElementRef, Input } from '@angular/core';\n\n/**\n * Директива установки фокуса\n */\n@Directive({\n  selector: '[appAutoFocus]',\n})\nexport default class AutoFocusDirective {\n  /**\n   * Флаг фокус\n   */\n  @Input() public set appAutoFocus(isFocused: boolean) {\n    if (isFocused) {\n      setTimeout(() => {\n        this.host.nativeElement.focus();\n      });\n    }\n  }\n\n  /**\n   * Конструктор\n   * @param host Фокусируемый элемент\n   */\n  constructor(private host: ElementRef<HTMLElement>) {}\n}\n",
      "selector": "[appAutoFocus]",
      "providers": [],
      "inputsClass": [
        {
          "name": "appAutoFocus",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nФлаг фокус\n",
          "description": "<p>Флаг фокус</p>\n",
          "line": 13,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "<p>Конструктор</p>\n",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "host",
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 19,
        "rawdescription": "\n\nКонструктор\n",
        "jsdoctags": [
          {
            "name": {
              "pos": 417,
              "end": 421,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "host"
            },
            "type": "ElementRef<HTMLElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 411,
              "end": 416,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>Фокусируемый элемент</p>\n"
          }
        ]
      },
      "accessors": {
        "appAutoFocus": {
          "name": "appAutoFocus",
          "setSignature": {
            "name": "appAutoFocus",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "isFocused",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 13,
            "rawdescription": "\n\nФлаг фокус\n",
            "description": "<p>Флаг фокус</p>\n",
            "jsdoctags": [
              {
                "name": "isFocused",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      }
    },
    {
      "name": "AutoFocusOutDirective",
      "id": "directive-AutoFocusOutDirective-470d3999b5cf44b594f83ae2325309ff5a26d5a104884f223866594dc582aa33d71784322ef0dafe9d35cff82b505a20b2a0d7d47ee493b0a8a4a40af56c42af",
      "file": "src/app/modules/drop-down/directives/auto-focus-out.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Directive({\n  selector: '[appAutoFocusOut]',\n})\nexport default class AutoFocusOutDirective {\n  /**\n   * Находится ли фокус в пределах хоста\n   */\n  public containsElement: Subject<boolean>;\n\n  constructor(private host: ElementRef<HTMLInputElement>) {\n    this.containsElement = new Subject();\n  }\n\n  @HostListener('focusout', ['$event'])\n  onBlur(event: FocusEvent) {\n    event.stopPropagation();\n    const host = this.host.nativeElement;\n    setTimeout(() => {\n      this.containsElement.next(host.contains(document.activeElement));\n    });\n  }\n}\n",
      "selector": "[appAutoFocusOut]",
      "providers": [],
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [
        {
          "name": "focusout",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "argsDecorator": ["$event"],
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18
        }
      ],
      "propertiesClass": [
        {
          "name": "containsElement",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Subject<boolean>",
          "optional": false,
          "description": "<p>Находится ли фокус в пределах хоста</p>\n",
          "line": 11,
          "rawdescription": "\n\nНаходится ли фокус в пределах хоста\n",
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "onBlur",
          "args": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 18,
          "deprecated": false,
          "deprecationMessage": "",
          "decorators": [
            {
              "name": "HostListener",
              "stringifiedArguments": "'focusout', ['$event']"
            }
          ],
          "jsdoctags": [
            {
              "name": "event",
              "type": "FocusEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "host",
            "type": "ElementRef<HTMLInputElement>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 11,
        "jsdoctags": [
          {
            "name": "host",
            "type": "ElementRef<HTMLInputElement>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    },
    {
      "name": "TableDirective",
      "id": "directive-TableDirective-12fb5fc59ffff6ed941e74d70ba949c87910315e21af003962bb0d4609521e9d7623488d28aa8c2daf52774ce6ed6ece4d6dd08ccf8be4a7551e840ff3ba91a7",
      "file": "src/app/common/table/table.directive.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, TemplateRef, Input } from '@angular/core';\r\n@Directive({\r\n  selector: '[template]',\r\n})\r\nexport class TableDirective {\r\n  @Input('template') public template?: string;\r\n\r\n  @Input('title') public title?: string;\r\n\r\n  constructor(public templateRef: TemplateRef<any>) {}\r\n}\r\n",
      "selector": "[template]",
      "providers": [],
      "inputsClass": [
        {
          "name": "template",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 6,
          "type": "string",
          "decorators": []
        },
        {
          "name": "title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 8,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [
        {
          "name": "templateRef",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "TemplateRef<any>",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [],
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 8,
        "jsdoctags": [
          {
            "name": "templateRef",
            "type": "TemplateRef<any>",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    }
  ],
  "components": [
    {
      "name": "AppComponent",
      "id": "component-AppComponent-3b2358b10a20a83b91c201bb9c5ec0631b951a04e86b48ee3c137bec623b6e6e9853712851cc45a1562be1afc6cad1942b5dd70c1a918bb97094d517567ede55",
      "file": "src/app/app.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-root",
      "styleUrls": ["./app.component.scss"],
      "styles": [],
      "templateUrl": ["./app.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "options",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "any",
          "optional": false,
          "description": "",
          "line": 9,
          "modifierKind": [123]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport default class AppComponent {\n  public options: any;\n\n  constructor() {\n    this.options = [\n      {\n        id: 0,\n        value: 'test1',\n      },\n      {\n        id: 1,\n        value: 'test2',\n        inactive: true,\n      },\n      {\n        id: 2,\n        value: 'test3',\n      },\n    ];\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host::ng-deep {\r\n  .ui {\r\n    padding: 10px;\r\n\r\n    &__example {\r\n      display: flex;\r\n      align-items: flex-start;\r\n      width: 40%;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./app.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [],
        "line": 9
      },
      "templateData": "<app-drop-down [options]=\"options\" [filter]=\"true\"></app-drop-down>\r\n"
    },
    {
      "name": "BooleanButtonComponent",
      "id": "component-BooleanButtonComponent-a5db5e1ddeada39f24f48af92e27c465f998bd7fe3f262c6bdb23a11b014da79ef49f6c56852321f7cd179d6fd228e629215911b20e793dfb5687afa0ed03102",
      "file": "src/app/common/button/boolean-button/boolean-button.component.ts",
      "changeDetection": "ChangeDetectionStrategy.OnPush",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-boolean-button",
      "styleUrls": ["./boolean-button.component.scss"],
      "styles": [],
      "templateUrl": ["./boolean-button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "action",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nАктивна ли кнопка\n",
          "description": "<p>Активна ли кнопка</p>\n",
          "line": 29,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "activeText",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст включенной кнопки\n",
          "description": "<p>Текст включенной кнопки</p>\n",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "buttonType",
          "defaultValue": "ButtonType.default",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТип кнопки\n",
          "description": "<p>Тип кнопки</p>\n",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "name": "disableText",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст отключенной кнопки\n",
          "description": "<p>Текст отключенной кнопки</p>\n",
          "line": 19,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "updateEvent",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСобытие обновления\n",
          "description": "<p>Событие обновления</p>\n",
          "line": 34,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "btnText",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": false,
          "description": "<p>Текст кнопки</p>\n",
          "line": 39,
          "rawdescription": "\n\nТекст кнопки\n",
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "onClick",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nНажатие кнопки\n",
          "description": "<p>Нажатие кнопки</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 942,
                "end": 947,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "value"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 936,
                "end": 941,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\nimport ButtonType from '../default-button/model/buttonType.enum';\n\n@Component({\n  selector: 'app-boolean-button',\n  templateUrl: './boolean-button.component.html',\n  styleUrls: ['./boolean-button.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport default class BooleanButtonComponent {\n  /**\n   * Тип кнопки\n   */\n  @Input() public buttonType: string = ButtonType.default;\n\n  /**\n   * Текст отключенной кнопки\n   */\n  @Input() public disableText: string = '';\n\n  /**\n   * Текст включенной кнопки\n   */\n  @Input() public activeText: string = '';\n\n  /**\n   * Активна ли кнопка\n   */\n  @Input() public action: boolean = false;\n\n  /**\n   * Событие обновления\n   */\n  @Output() updateEvent = new EventEmitter<boolean>();\n\n  /**\n   * Текст кнопки\n   */\n  public btnText: string = '';\n\n  /**\n   * Нажатие кнопки\n   * @param value\n   */\n  // TODO: тип\n  public onClick(value: any): void {\n    var a = 4;\n\n    this.action = !this.action;\n    this.btnText = this.action ? this.activeText : this.disableText;\n    this.updateEvent.emit(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import \"./src/app/shared/style/button.scss\";\r\n",
          "styleUrl": "./boolean-button.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<button\n  class=\"button\"\n  [ngClass]=\"[buttonType ? 'button_' + buttonType : '', action ? 'button_active' : '']\"\n  type=\"button\"\n  data-test-id=\"check-action\"\n  (click)=\"onClick($event)\"\n>\n  {{ btnText }}\n</button>\n"
    },
    {
      "name": "DefaultButtonComponent",
      "id": "component-DefaultButtonComponent-cf5416257cd806c29ecac55d09b40e0a4e00e9695eb931828228c7f416b802c15304bae505aa5f1aafacdc506933e64576db5929ddba73e66ea22e980b04b2b5",
      "file": "src/app/common/button/default-button/default-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-default-button",
      "styleUrls": ["./default-button.component.scss"],
      "styles": [],
      "templateUrl": ["./default-button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "buttonType",
          "defaultValue": "ButtonType.default",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТип кнопки\n",
          "description": "<p>Тип кнопки</p>\n",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "name": "labelText",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст кнопки\n",
          "description": "<p>Текст кнопки</p>\n",
          "line": 19,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "updateEvent",
          "defaultValue": "new EventEmitter<boolean>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСобытие обновления\n",
          "description": "<p>Событие обновления</p>\n",
          "line": 24,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "onClickButton",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 31,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nНажатие кнопки\n",
          "description": "<p>Нажатие кнопки</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 611,
                "end": 616,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "value"
              },
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 605,
                "end": 610,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": ""
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport ButtonType from './model/buttonType.enum';\n\n@Component({\n  selector: 'app-default-button',\n  templateUrl: './default-button.component.html',\n  styleUrls: ['./default-button.component.scss'],\n})\nexport default class DefaultButtonComponent {\n  /**\n   * Тип кнопки\n   */\n  @Input() public buttonType: string = ButtonType.default;\n\n  /**\n   * Текст кнопки\n   */\n  @Input() public labelText: string = '';\n\n  /**\n   * Событие обновления\n   */\n  @Output() updateEvent = new EventEmitter<boolean>();\n\n  /**\n   * Нажатие кнопки\n   * @param value\n   */\n  // TODO: тип\n  public onClickButton(value: any): void {\n    this.updateEvent.emit(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import \"./src/app/shared/style/button.scss\";\r\n",
          "styleUrl": "./default-button.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<button\n  class=\"button\"\n  type=\"button\"\n  data-test-id=\"check-action\"\n  (click)=\"onClickButton($event)\"\n  [ngClass]=\"buttonType ? 'button_' + buttonType : ''\"\n>\n  {{ labelText }}\n</button>\n"
    },
    {
      "name": "DropDownComponent",
      "id": "component-DropDownComponent-d83f0d125f6ac70e444be30580bf5f15522fdaa74196da9fc919c10a68e09ff5668d498fdd8d995674d77266323077b430d302e1f4f57476668791a56741063d",
      "file": "src/app/modules/drop-down/drop-down.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-drop-down",
      "styleUrls": ["./drop-down.component.scss"],
      "styles": [],
      "templateUrl": ["./drop-down.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "active",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nФлаг активного состояния\n",
          "description": "<p>Флаг активного состояния</p>\n",
          "line": 48,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "currentOption",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСеттер установки активной опции\n",
          "description": "<p>Сеттер установки активной опции</p>\n",
          "line": 93,
          "type": "DropDownOption",
          "decorators": []
        },
        {
          "name": "filter",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nФлаг добавления поля фильтрации\n",
          "description": "<p>Флаг добавления поля фильтрации</p>\n",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "filterValue",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст фильтрации\n",
          "description": "<p>Текст фильтрации</p>\n",
          "line": 58,
          "type": "string",
          "decorators": []
        },
        {
          "name": "options",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nДанные выпадающего списка\n",
          "description": "<p>Данные выпадающего списка</p>\n",
          "line": 41,
          "type": "DropDownOption[]",
          "decorators": []
        },
        {
          "name": "placeHolder",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст заполнитель для поля поиска\n",
          "description": "<p>Текст заполнитель для поля поиска</p>\n",
          "line": 36,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "backupData",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "DropDownOption[]",
          "optional": false,
          "description": "<p>Копия данных выпадающего списка</p>\n",
          "line": 73,
          "rawdescription": "\n\nКопия данных выпадающего списка\n",
          "modifierKind": [123]
        },
        {
          "name": "curOption",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "DropDownOption",
          "optional": true,
          "description": "<p>Активная опция</p>\n",
          "line": 78,
          "rawdescription": "\n\nАктивная опция\n",
          "modifierKind": [123]
        },
        {
          "name": "dropDown",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ElementRef<HTMLElement>",
          "optional": false,
          "description": "<p>Выпадающий список</p>\n",
          "line": 63,
          "rawdescription": "\n\nВыпадающий список\n",
          "decorators": [
            {
              "name": "ViewChild",
              "stringifiedArguments": "'dropDown'"
            }
          ],
          "modifierKind": [123]
        },
        {
          "name": "dropDownOptions",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "DropDownOption[]",
          "optional": false,
          "description": "<p>Данные выпадающего списка с опорой рендеринга (key)</p>\n",
          "line": 68,
          "rawdescription": "\n\nДанные выпадающего списка с опорой рендеринга (key)\n",
          "modifierKind": [123]
        },
        {
          "name": "dropDownService",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "DropDownService",
          "optional": false,
          "description": "Сервис выпадающего списка",
          "line": 107,
          "modifierKind": [123]
        },
        {
          "name": "idFor",
          "defaultValue": "'idFor'",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "string",
          "optional": true,
          "description": "<p>Идентификатор текстовой метки</p>\n",
          "line": 83,
          "rawdescription": "\n\nИдентификатор текстовой метки\n",
          "modifierKind": [123]
        },
        {
          "name": "scrollSettings",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "ScrollSettings",
          "optional": false,
          "description": "<p>Опции для ползунка прокрутки</p>\n",
          "line": 88,
          "rawdescription": "\n\nОпции для ползунка прокрутки\n",
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "callTest",
          "args": [
            {
              "name": "filterText",
              "type": "string",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 124,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nФильтрация элементов выпадающего списка\n",
          "description": "<p>Фильтрация элементов выпадающего списка</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 3097,
                "end": 3107,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "filterText"
              },
              "type": "string",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3091,
                "end": 3096,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>: string</p>\n"
            }
          ]
        },
        {
          "name": "changeOption",
          "args": [
            {
              "name": "keyCode",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 201,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nПереключение активной опции клавишами\n",
          "description": "<p>Переключение активной опции клавишами</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 5009,
                "end": 5016,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "keyCode"
              },
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5003,
                "end": 5008,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Код клавиши переключения опции</p>\n"
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 109,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [123]
        },
        {
          "name": "onClickOption",
          "args": [
            {
              "name": "event",
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "option",
              "type": "DropDownOption",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 185,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСобытие переключения активной опции кликом\n",
          "description": "<p>Событие переключения активной опции кликом</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 4607,
                "end": 4612,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "event"
              },
              "type": "MouseEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4601,
                "end": 4606,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Событие клика выбора опции</p>\n"
            },
            {
              "name": {
                "pos": 4652,
                "end": 4658,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "option"
              },
              "type": "DropDownOption",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 4646,
                "end": 4651,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Опция</p>\n"
            }
          ]
        },
        {
          "name": "onClickPanel",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 165,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОбработчик клика\n",
          "description": "<p>Обработчик клика</p>\n",
          "modifierKind": [123],
          "jsdoctags": []
        },
        {
          "name": "onKeyDownPanel",
          "args": [
            {
              "name": "event",
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОбработчик клавиш\n",
          "description": "<p>Обработчик клавиш</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": {
                "pos": 3486,
                "end": 3491,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "event"
              },
              "type": "KeyboardEvent",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 3480,
                "end": 3485,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Объект события</p>\n"
            }
          ]
        },
        {
          "name": "toggleActive",
          "args": [
            {
              "name": "active",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 172,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nПоказать | скрыть панель\n",
          "description": "<p>Показать | скрыть панель</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "active",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "optional": true,
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "trackOptionId",
          "args": [
            {
              "name": "_",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "option",
              "type": "DropDownOption",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "number",
          "typeParameters": [],
          "line": 193,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОпора рендеринга\n",
          "description": "<p>Опора рендеринга</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "_",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "option",
              "type": "DropDownOption",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "updateKeys",
          "args": [
            {
              "name": "options",
              "type": "DropDownOption[]",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "DropDownOption[]",
          "typeParameters": [],
          "line": 217,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОбновить ключи рендеринга\n",
          "description": "<p>Обновить ключи рендеринга</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 5598,
                "end": 5605,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "options"
              },
              "type": "DropDownOption[]",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 5592,
                "end": 5597,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Данные выпадающего списка</p>\n"
            }
          ]
        },
        {
          "name": "updateScrollSettings",
          "args": [
            {
              "name": "scrollSettings",
              "type": "Partial<ScrollSettings>",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 224,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nОбновить настройки скроллинга\n",
          "description": "<p>Обновить настройки скроллинга</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": "scrollSettings",
              "type": "Partial<ScrollSettings>",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, ViewChild, OnInit, ElementRef, ChangeDetectorRef } from '@angular/core';\n\nimport AutoFocusOutDirective from './directives/auto-focus-out.directive';\nimport KeyboardCodes from 'app/shared/models/keyboard-key-codes';\nimport showOptions from './animations/show-options';\nimport ScrollSettings from './interfaces/scroll-settings.interface';\nimport DropDownOption from './interfaces/drop-down-options.interface';\nimport DropDownService from './services/drop-down.service';\n\n@Component({\n  selector: 'app-drop-down',\n  templateUrl: './drop-down.component.html',\n  styleUrls: ['./drop-down.component.scss'],\n  animations: [showOptions],\n})\nexport default class DropDownComponent implements OnInit {\n  /**\n   * Проверка наличия фокуса в пределах хост-узла\n   */\n  @ViewChild(AutoFocusOutDirective)\n  set autoFocusOut(directive: AutoFocusOutDirective) {\n    if (!directive) {\n      return;\n    }\n    directive.containsElement.subscribe((isContain: boolean) => {\n      if (!isContain) {\n        this.active = false;\n        this.updateScrollSettings({ active: false });\n      }\n    });\n  }\n\n  /**\n   * Текст заполнитель для поля поиска\n   */\n  @Input() public placeHolder: string = '';\n\n  /**\n   * Данные выпадающего списка\n   */\n  @Input() public set options(values: DropDownOption[]) {\n    this.dropDownOptions = this.updateKeys(values);\n  }\n\n  /**\n   * Флаг активного состояния\n   */\n  @Input() public active: boolean = false;\n\n  /**\n   * Флаг добавления поля фильтрации\n   */\n  @Input() filter: boolean = false;\n\n  /**\n   * Текст фильтрации\n   */\n  @Input() filterValue!: string;\n\n  /**\n   * Выпадающий список\n   */\n  @ViewChild('dropDown') public dropDown!: ElementRef<HTMLElement>;\n\n  /**\n   * Данные выпадающего списка с опорой рендеринга (key)\n   */\n  public dropDownOptions: DropDownOption[] = [];\n\n  /**\n   * Копия данных выпадающего списка\n   */\n  public backupData: DropDownOption[] = [];\n\n  /**\n   * Активная опция\n   */\n  public curOption?: DropDownOption;\n\n  /**\n   * Идентификатор текстовой метки\n   */\n  public idFor?: string = 'idFor';\n\n  /**\n   * Опции для ползунка прокрутки\n   */\n  public scrollSettings!: ScrollSettings;\n\n  /**\n   * Сеттер установки активной опции\n   */\n  @Input() private set currentOption(option: DropDownOption) {\n    const defaultElementNumber = -1;\n    const scrollOptions = {\n      activeElementNumber: option?.key ?? defaultElementNumber,\n    };\n    this.curOption = option;\n    this.updateScrollSettings(scrollOptions);\n  }\n\n  /**\n   * Конструктор\n   * @param cdRef Сервис обновления\n   * @param dropDownService Сервис выпадающего списка\n   */\n  constructor(private cdRef: ChangeDetectorRef, public dropDownService: DropDownService) {}\n\n  public ngOnInit(): void {\n    const defaultElementNumber = -1;\n    const scrollOptions = {\n      className: 'drop-down__options',\n      activeElementNumber: this.curOption?.key || defaultElementNumber,\n      active: this.active,\n    };\n    this.updateScrollSettings(scrollOptions);\n    this.backupData = this.dropDownOptions;\n  }\n\n  /**\n   * Фильтрация элементов выпадающего списка\n   * @param filterText: string\n   */\n  public callTest(filterText: string) {\n    const regexp = new RegExp(filterText.trim() || '\\\\d+', 'ig');\n    const newData = this.backupData.filter((option) => ~option.value.search(regexp));\n    this.options = filterText ? newData : this.backupData;\n    this.filterValue = filterText;\n    this.cdRef.detectChanges();\n  }\n\n  /**\n   * Обработчик клавиш\n   * @param event Объект события\n   */\n  public onKeyDownPanel(event: KeyboardEvent): void {\n    const keyCode = event.keyCode || event.charCode;\n    switch (keyCode) {\n      case KeyboardCodes.ArrowUP:\n        this.changeOption(keyCode);\n        break;\n      case KeyboardCodes.ArrowDown:\n        this.changeOption(keyCode);\n        break;\n      case KeyboardCodes.Escape:\n        this.toggleActive(false);\n        break;\n      case KeyboardCodes.Space:\n        if (!this.filter && this.active) {\n          this.toggleActive();\n        }\n        break;\n      case KeyboardCodes.Enter:\n        this.toggleActive();\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Обработчик клика\n   * @param event Объект события\n   */\n  public onClickPanel(): void {\n    this.toggleActive();\n  }\n\n  /**\n   * Показать | скрыть панель\n   */\n  private toggleActive(active?: boolean): void {\n    this.active = active ?? !this.active;\n    if (!this.active) {\n      this.dropDown.nativeElement.focus();\n    }\n    this.updateScrollSettings({ active: this.active });\n  }\n\n  /**\n   * Событие переключения активной опции кликом\n   * @param event Событие клика выбора опции\n   * @param option Опция\n   */\n  public onClickOption(event: MouseEvent, option: DropDownOption): void {\n    this.currentOption = option;\n    this.toggleActive();\n  }\n\n  /**\n   * Опора рендеринга\n   */\n  public trackOptionId(_: number, option: DropDownOption): number {\n    return option.key as number;\n  }\n\n  /**\n   * Переключение активной опции клавишами\n   * @param keyCode Код клавиши переключения опции\n   */\n  private changeOption(keyCode: number): void {\n    const isArrowUp = keyCode === KeyboardCodes.ArrowUP;\n    const step = isArrowUp ? -1 : 1;\n    const start = isArrowUp ? 0 : this.dropDownOptions.length - 1;\n    const isBoundaryOption = this.curOption?.key === this.dropDownOptions[start].key;\n    if (isBoundaryOption) {\n      return;\n    }\n    const newOptionIndex = this.curOption ? (this.curOption as any).key + step : 0;\n    this.currentOption = this.dropDownOptions[newOptionIndex];\n  }\n\n  /**\n   * Обновить ключи рендеринга\n   * @param options Данные выпадающего списка\n   */\n  private updateKeys(options: DropDownOption[]): DropDownOption[] {\n    return options.map((opt, index) => ({ ...opt, key: index }));\n  }\n\n  /**\n   * Обновить настройки скроллинга\n   */\n  private updateScrollSettings(scrollSettings: Partial<ScrollSettings>): void {\n    this.dropDownService.updateScrollSettings(scrollSettings);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ".drop-down {\n  $drop-down: &;\n\n  position: relative;\n  display: inline-block;\n  border: 1px solid var(--grey);\n  border-radius: 6px;\n\n  @each $name in ('hover', 'focus') {\n    &:#{$name} {\n      border-color: var(--slateblue);\n      outline: none;\n    }\n  }\n\n  &_active {\n    #{$drop-down}__btn:after {\n      content: '\\f005';\n    }\n\n    border: {\n      color: var(--slateblue);\n      radius: 6px 6px 0 0;\n    }\n  }\n\n  &__filter {\n    padding: 10px 16px;\n    background-color: var(--slateblue-light-98);\n  }\n\n  &__field {\n    width: 220px;\n    display: block;\n    height: 38px;\n    padding: 0 28px 0 20px;\n    color: var(--black);\n    background-color: transparent;\n    cursor: pointer;\n  }\n\n  &__btn {\n    position: absolute;\n    top: 50%;\n    right: 0;\n    bottom: 0;\n    display: flex;\n    align-items: center;\n    padding: 0;\n    margin-right: 10px;\n    background-color: transparent;\n    background-color: var(--white);\n    transform: translateY(-50%);\n\n    &::after {\n      color: var(--grey);\n      font-size: 14px;\n      font-family: var(--sym-font);\n      content: '\\f004';\n    }\n  }\n\n  &__panel {\n    opacity: 1;\n    position: absolute;\n    right: -1px;\n    left: -1px;\n    z-index: 3;\n    background-color: var(--white);\n    border: 1px solid var(--slateblue);\n  }\n\n  &__options {\n    height: 100px;\n    overflow-y: auto;\n  }\n\n  &__item {\n    height: 20px;\n    padding: 0 16px;\n    color: var(--black-75);\n    line-height: 20px;\n    cursor: pointer;\n\n    &_focused,\n    &:hover {\n      color: var(--white);\n      background-color: var(--slateblue);\n      outline: none;\n    }\n  }\n\n  &__text {\n    padding: 4px 0 4px 10px;\n    color: var(--black-75);\n  }\n}\n",
          "styleUrl": "./drop-down.component.scss"
        }
      ],
      "stylesData": "",
      "constructorObj": {
        "name": "constructor",
        "description": "<p>Конструктор</p>\n",
        "deprecated": false,
        "deprecationMessage": "",
        "args": [
          {
            "name": "cdRef",
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "dropDownService",
            "type": "DropDownService",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "line": 100,
        "rawdescription": "\n\nКонструктор\n",
        "jsdoctags": [
          {
            "name": {
              "pos": 2524,
              "end": 2529,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "cdRef"
            },
            "type": "ChangeDetectorRef",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 2518,
              "end": 2523,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>Сервис обновления</p>\n"
          },
          {
            "name": {
              "pos": 2560,
              "end": 2575,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "dropDownService"
            },
            "type": "DropDownService",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "pos": 2554,
              "end": 2559,
              "flags": 4227072,
              "modifierFlagsCache": 0,
              "transformFlags": 0,
              "kind": 79,
              "escapedText": "param"
            },
            "comment": "<p>Сервис выпадающего списка</p>\n"
          }
        ]
      },
      "implements": ["OnInit"],
      "accessors": {
        "autoFocusOut": {
          "name": "autoFocusOut",
          "setSignature": {
            "name": "autoFocusOut",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "directive",
                "type": "AutoFocusOutDirective",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "rawdescription": "\n\nПроверка наличия фокуса в пределах хост-узла\n",
            "description": "<p>Проверка наличия фокуса в пределах хост-узла</p>\n",
            "jsdoctags": [
              {
                "name": "directive",
                "type": "AutoFocusOutDirective",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "options": {
          "name": "options",
          "setSignature": {
            "name": "options",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "values",
                "type": "DropDownOption[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "rawdescription": "\n\nДанные выпадающего списка\n",
            "description": "<p>Данные выпадающего списка</p>\n",
            "jsdoctags": [
              {
                "name": "values",
                "type": "DropDownOption[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        },
        "currentOption": {
          "name": "currentOption",
          "setSignature": {
            "name": "currentOption",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "option",
                "type": "DropDownOption",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 93,
            "rawdescription": "\n\nСеттер установки активной опции\n",
            "description": "<p>Сеттер установки активной опции</p>\n",
            "jsdoctags": [
              {
                "name": "option",
                "type": "DropDownOption",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          }
        }
      },
      "templateData": "<div\r\n  class=\"drop-down\"\r\n  data-test-id=\"test\"\r\n  [ngClass]=\"{ 'drop-down_active': active }\"\r\n  (keydown)=\"onKeyDownPanel($event)\"\r\n  role=\"button\"\r\n  [attr.aria-expanded]=\"this.active\"\r\n  aria-haspopup=\"true\"\r\n  #dropDown\r\n  appAutoFocusOut\r\n  tabindex=\"0\"\r\n>\r\n  <input\r\n    class=\"drop-down__field\"\r\n    [id]=\"idFor\"\r\n    [ngModel]=\"curOption?.value\"\r\n    [placeholder]=\"placeHolder\"\r\n    (click)=\"onClickPanel()\"\r\n    type=\"text\"\r\n    autocomplete=\"off\"\r\n    tabindex=\"-1\"\r\n    readonly\r\n  />\r\n  <button class=\"drop-down__btn\" (click)=\"onClickPanel()\" type=\"button\" aria-hidden=\"true\" tabIndex=\"-1\"></button>\r\n  <ng-container *ngIf=\"true\">\r\n    <div\r\n      class=\"drop-down__panel\"\r\n      [@openClose]=\"active ? 'open' : 'closed'\"\r\n      (@openClose.start)=\"$event.element.style.display = 'block'\"\r\n      (@openClose.done)=\"$event.element.style.display = $event.toState === 'closed' ? 'none' : false\"\r\n    >\r\n      <ng-container *ngIf=\"filter\">\r\n        <div class=\"drop-down__filter\">\r\n          <app-filter\r\n            [filterPlaceholder]=\"'filter text'\"\r\n            [filterValue]=\"filterValue\"\r\n            [focused]=\"this.active\"\r\n            (callback)=\"callTest($event)\"\r\n          ></app-filter>\r\n        </div>\r\n      </ng-container>\r\n      <div class=\"drop-down__options\">\r\n        <ng-container *ngFor=\"let item of dropDownOptions; trackBy: trackOptionId\">\r\n          <div\r\n            class=\"drop-down__item\"\r\n            [ngClass]=\"{\r\n              'drop-down__item_focused': item.id === curOption?.id\r\n            }\"\r\n            (click)=\"onClickOption($event, item)\"\r\n            role=\"button\"\r\n          >\r\n            {{ item.value }}\r\n          </div>\r\n        </ng-container>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n"
    },
    {
      "name": "FilterComponent",
      "id": "component-FilterComponent-d75dca9030d59f502929562bc07de5c64de69154c29b9b02df1c05f8833c787b6913567575deddb867ad8e643d21276648084aa1fd415d5cd7a04cc803c1fddc",
      "file": "src/app/common/filter/filter.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-filter",
      "styleUrls": ["./filter.component.scss"],
      "styles": [],
      "templateUrl": ["./filter.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "filterPlaceholder",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст заполнитель\n",
          "description": "<p>Текст заполнитель</p>\n",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "name": "filterValue",
          "defaultValue": "''",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nТекст поиска\n",
          "description": "<p>Текст поиска</p>\n",
          "line": 12,
          "type": "string",
          "decorators": []
        },
        {
          "name": "focused",
          "defaultValue": "true",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nФокус по умолчанию\n",
          "description": "<p>Фокус по умолчанию</p>\n",
          "line": 22,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "callback",
          "defaultValue": "new EventEmitter()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nКоллбэк\n",
          "description": "<p>Коллбэк</p>\n",
          "line": 27,
          "type": "EventEmitter<string>"
        }
      ],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 29,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onChangeFilterValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 39,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nИзменение текста поиска\n",
          "description": "<p>Изменение текста поиска</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, EventEmitter, AfterViewInit } from '@angular/core';\n\n@Component({\n  selector: 'app-filter',\n  templateUrl: './filter.component.html',\n  styleUrls: ['./filter.component.scss'],\n})\nexport default class FilterComponent implements AfterViewInit {\n  /**\n   * Текст поиска\n   */\n  @Input() public filterValue: string = '';\n\n  /**\n   * Текст заполнитель\n   */\n  @Input() public filterPlaceholder: string = '';\n\n  /**\n   * Фокус по умолчанию\n   */\n  @Input() public focused: boolean = true;\n\n  /**\n   * Коллбэк\n   */\n  @Output() public callback: EventEmitter<string> = new EventEmitter();\n\n  ngAfterViewInit() {\n    if (this.filterValue) {\n      this.onChangeFilterValue(this.filterValue);\n    }\n  }\n\n  /**\n   * Изменение текста поиска\n   */\n  // TODO: тип\n  public onChangeFilterValue(value: any): void {\n    this.callback.emit(value);\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host::ng-deep .search {\r\n  position: relative;\r\n\r\n  &__field {\r\n    display: block;\r\n    width: 100%;\r\n    height: 30px;\r\n    padding: 5px 10px 5px 5px;\r\n    color: var(--black-75);\r\n    font-family: var(--main-font), Arial, sans-serif;\r\n    border: 1px solid var(--slateblue);\r\n    border-radius: 4px;\r\n  }\r\n\r\n  &__icon {\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 5px;\r\n    transform: translate(0, -50%);\r\n  }\r\n}\r\n",
          "styleUrl": "./filter.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["AfterViewInit"],
      "templateData": "<div class=\"search\">\r\n  <input\r\n    [appAutoFocus]=\"focused\"\r\n    id=\"search-field\"\r\n    class=\"search__field\"\r\n    [ngModel]=\"filterValue\"\r\n    [placeholder]=\"filterPlaceholder\"\r\n    (ngModelChange)=\"onChangeFilterValue($event)\"\r\n    type=\"text\"\r\n  />\r\n  <svg-icon\r\n    src=\"assets/icons/search.svg\"\r\n    class=\"search__icon\"\r\n    [svgStyle]=\"{ 'width.px': 12, 'height.px': 12 }\"\r\n    [svgAriaLabel]=\"'search field'\"\r\n  ></svg-icon>\r\n</div>\r\n"
    },
    {
      "name": "SelectButtonComponent",
      "id": "component-SelectButtonComponent-da5bcbb2a591345c62565f143dbfb3e7e5e9a0382b00db86b099cbea40df16f15f8bd1bf86a7605a81cca8d5426f55931637e43f03289ef66bd4488d5be01aa2",
      "file": "src/app/common/button/select-button/select-button.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-select-button",
      "styleUrls": ["./select-button.component.scss"],
      "styles": [],
      "templateUrl": ["./select-button.component.html"],
      "viewProviders": [],
      "inputsClass": [
        {
          "name": "options",
          "defaultValue": "[]",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСписок опций\n",
          "description": "<p>Список опций</p>\n",
          "line": 14,
          "type": "Option[]",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "updateEvent",
          "defaultValue": "new EventEmitter<Option>()",
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСобытие обновления\n",
          "description": "<p>Событие обновления</p>\n",
          "line": 19,
          "type": "EventEmitter"
        }
      ],
      "propertiesClass": [
        {
          "name": "isActive",
          "defaultValue": "false",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "boolean",
          "optional": false,
          "description": "<p>Флаг активного состояния</p>\n",
          "line": 24,
          "rawdescription": "\n\nФлаг активного состояния\n",
          "modifierKind": [123]
        }
      ],
      "methodsClass": [
        {
          "name": "changeActiveOption",
          "args": [
            {
              "name": "activeOption",
              "type": "Option",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nСмена активной опции\n",
          "description": "<p>Смена активной опции</p>\n",
          "modifierKind": [121],
          "jsdoctags": [
            {
              "name": {
                "pos": 847,
                "end": 859,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "activeOption"
              },
              "type": "Option",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "pos": 841,
                "end": 846,
                "flags": 4227072,
                "modifierFlagsCache": 0,
                "transformFlags": 0,
                "kind": 79,
                "escapedText": "param"
              },
              "comment": "<p>Активная опция</p>\n"
            }
          ]
        },
        {
          "name": "ngOnInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "onClickButton",
          "args": [
            {
              "name": "item",
              "type": "Option",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 34,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nНажатие кнопки\n",
          "description": "<p>Нажатие кнопки</p>\n",
          "modifierKind": [123],
          "jsdoctags": [
            {
              "name": "item",
              "type": "Option",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setActiveOptionAsDefault",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "rawdescription": "\n\nУстановить активную опцию по умолчанию\n",
          "description": "<p>Установить активную опцию по умолчанию</p>\n",
          "modifierKind": [121]
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, Input, Output, OnInit, EventEmitter } from '@angular/core';\n\nimport Option from './model/option';\n\n@Component({\n  selector: 'app-select-button',\n  templateUrl: './select-button.component.html',\n  styleUrls: ['./select-button.component.scss'],\n})\nexport default class SelectButtonComponent implements OnInit {\n  /**\n   * Список опций\n   */\n  @Input() public options: Option[] = [];\n\n  /**\n   * Событие обновления\n   */\n  @Output() updateEvent = new EventEmitter<Option>();\n\n  /**\n   * Флаг активного состояния\n   */\n  public isActive: boolean = false;\n\n  ngOnInit(): void {\n    this.setActiveOptionAsDefault();\n  }\n\n  /**\n   * Нажатие кнопки\n   * @param value\n   */\n  public onClickButton(item: Option): void {\n    this.changeActiveOption(item);\n    this.updateEvent.emit(item);\n  }\n\n  /**\n   * Смена активной опции\n   * @param activeOption Активная опция\n   */\n  private changeActiveOption(activeOption: Option): void {\n    this.options = this.options.map((option) => {\n      option.inactive = option.id === activeOption.id;\n\n      return option;\n    });\n  }\n\n  /**\n   * Установить активную опцию по умолчанию\n   */\n  private setActiveOptionAsDefault(): void {\n    if (!this.options) {\n      return;\n    }\n    const inactiveOption = this.options.find((option) => option.inactive);\n    if (!inactiveOption && this.options[0]) {\n      this.options[0].inactive = true;\n    }\n  }\n}\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": "@import \"./src/app/shared/style/button.scss\";\r\n\r\n.select-button {\r\n  .button {\r\n    &:not(:first-child) {\r\n      border-radius: 0 20px 20px 0;\r\n    }\r\n\r\n    &:not(:last-child) {\r\n      border-right: unset;\r\n      border-radius: 20px 0 0 20px;\r\n    }\r\n\r\n    &:not(:last-child):not(:first-child) {\r\n      border-radius: unset;\r\n    }\r\n\r\n    &_active {\r\n      color: var(--white);\r\n      background-color: var(--slateblue);\r\n      border: unset;\r\n    }\r\n  }\r\n}\r\n",
          "styleUrl": "./select-button.component.scss"
        }
      ],
      "stylesData": "",
      "implements": ["OnInit"],
      "templateData": "<div class=\"select-button\">\n  <ng-container *ngFor=\"let item of options\">\n    <button\n      class=\"button\"\n      type=\"button\"\n      data-test-id=\"check-action\"\n      (click)=\"onClickButton(item)\"\n      [ngClass]=\"{ button_active: item.inactive }\"\n    >\n      {{ item.name }}\n    </button>\n  </ng-container>\n</div>\n"
    },
    {
      "name": "TableComponent",
      "id": "component-TableComponent-74e000379b330df582bebd642b54303cd00a0b4565e7240dd995a1ec678da2b483441c52e45143164f7e311a24b1382527e874ddf0f9f4e9389698a4754daa94",
      "file": "src/app/common/table/table.component.ts",
      "encapsulation": [],
      "entryComponents": [],
      "inputs": [],
      "outputs": [],
      "providers": [],
      "selector": "app-table",
      "styleUrls": ["table.component.scss"],
      "styles": [],
      "templateUrl": ["table.component.html"],
      "viewProviders": [],
      "inputsClass": [],
      "outputsClass": [],
      "propertiesClass": [
        {
          "name": "dataItem",
          "defaultValue": "{\r\n    name: 'test name'\r\n  }",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "optional": false,
          "description": "",
          "line": 13
        },
        {
          "name": "details",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "QueryList<TableDirective>",
          "optional": true,
          "description": "",
          "line": 11,
          "decorators": [
            {
              "name": "ContentChildren",
              "stringifiedArguments": "TableDirective"
            }
          ]
        }
      ],
      "methodsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "description": "",
      "rawdescription": "\n",
      "type": "component",
      "sourceCode": "import { Component, QueryList, ContentChildren } from '@angular/core';\r\n\r\nimport { TableDirective } from './table.directive';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: 'table.component.html',\r\n  styleUrls: ['table.component.scss']\r\n})\r\nexport class TableComponent {\r\n  @ContentChildren(TableDirective) details?: QueryList<TableDirective>;\r\n\r\n  dataItem = {\r\n    name: 'test name'\r\n  };\r\n}\r\n",
      "assetsDirs": [],
      "styleUrlsData": [
        {
          "data": ":host::ng-deep {\r\n  .table {\r\n    table-layout: fixed;\r\n    overflow-x: auto;\r\n    white-space: normal;\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n  }\r\n}\r\n",
          "styleUrl": "table.component.scss"
        }
      ],
      "stylesData": "",
      "templateData": "<table class=\"table\">\r\n  <ng-container *ngFor=\"let detail of details\">\r\n    <thead class=\"table__thead\" *ngIf=\"detail.template === 'header'\">\r\n      <ng-container\r\n        *ngTemplateOutlet=\"detail.templateRef; context: { dataItem: dataItem }\"\r\n      >\r\n      </ng-container>\r\n    </thead>\r\n    <tbody class=\"table__tbody\" *ngIf=\"detail.template === 'body'\">\r\n      <ng-container *ngTemplateOutlet=\"detail.templateRef\"></ng-container>\r\n    </tbody>\r\n  </ng-container>\r\n</table>\r\n"
    }
  ],
  "modules": [
    {
      "name": "AppModule",
      "id": "module-AppModule-d6f56d6ddbaf93fd90d35034be217191d82292b08af92892fce16cdb74e09ecb868d276446206d8a510fa3fd3a22ffc8f01a4bdf5b8d0945da3fc7c13f0ff842",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\n\nimport AppComponent from './app.component';\n\nimport SharedModule from './shared/shared.module';\nimport AppRoutingModule from './app-routing.module';\n\nimport ButtonModule from './common/button/button.module';\nimport DropDownModule from './modules/drop-down/drop-down.module';\n\n@NgModule({\n  bootstrap: [AppComponent],\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    SharedModule,\n    DropDownModule,\n    ButtonModule,\n    HttpClientModule,\n    AngularSvgIconModule.forRoot(),\n  ],\n})\nexport class AppModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": [
            {
              "name": "AppRoutingModule"
            },
            {
              "name": "ButtonModule"
            },
            {
              "name": "DropDownModule"
            },
            {
              "name": "SharedModule"
            }
          ]
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": [
            {
              "name": "AppComponent"
            }
          ]
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "AppRoutingModule",
      "id": "module-AppRoutingModule-d89800aad22c66023e716f5f0b9f88f9604878ba5f00de8443666ebbb8929c72676ff92fbeb4b78a0fbfa82a23d82affbb1e0fcc4bbae2d88004e9a64047b8ee",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/app-routing.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport default class AppRoutingModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "ButtonModule",
      "id": "module-ButtonModule-bf2bc2f99513122bd98c0858606610fd0b3e3a0220944eccf1f9001aec94e721acff022ca91ac863478d7b785a17671175c8931b677533060c8ec6a8c123cc7d",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/common/button/button.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport BooleanButtonComponent from './boolean-button/boolean-button.component';\r\nimport DefaultButtonComponent from './default-button/default-button.component';\r\nimport SelectButtonComponent from './select-button/select-button.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [BooleanButtonComponent, DefaultButtonComponent, SelectButtonComponent],\r\n  exports: [BooleanButtonComponent, DefaultButtonComponent, SelectButtonComponent]\r\n})\r\nexport default class ButtonModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "BooleanButtonComponent"
            },
            {
              "name": "DefaultButtonComponent"
            },
            {
              "name": "SelectButtonComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "BooleanButtonComponent"
            },
            {
              "name": "DefaultButtonComponent"
            },
            {
              "name": "SelectButtonComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "DropDownModule",
      "id": "module-DropDownModule-5accbb5d95db982157dc340d2fd281e7c9f22a8c5a0b2f106bae2edb4102f7d317fca243e207802beaee975c7bcaddcd61b7b89b0e2d6a7d3769be78c8c774e7",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/modules/drop-down/drop-down.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\n\nimport AutoFocusDirective from './directives/auto-focus/auto-focus.directive';\nimport AutoFocusOutDirective from './directives/auto-focus-out.directive';\nimport AutoScrollElementDirective from './directives/auto-scroll-element/auto-scroll-element.directive';\nimport DropDownComponent from './drop-down.component';\nimport FilterComponent from 'app/common/filter/filter.component';\n\n@NgModule({\n  declarations: [\n    AutoFocusDirective,\n    AutoFocusOutDirective,\n    AutoScrollElementDirective,\n    DropDownComponent,\n    FilterComponent,\n  ],\n  imports: [FormsModule, CommonModule, BrowserAnimationsModule, AngularSvgIconModule],\n  exports: [DropDownComponent],\n})\nexport default class DropDownModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "AutoFocusDirective"
            },
            {
              "name": "AutoFocusOutDirective"
            },
            {
              "name": "DropDownComponent"
            },
            {
              "name": "FilterComponent"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "DropDownComponent"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "SharedModule",
      "id": "module-SharedModule-f0d4605bf5595c8fb3f9a7446d5b2419be3d200cd5a0cffcf5836121a1e01d38b69b0fb518f9c3113439167dcdc945e99d4888c4c41e6a909c9f30c1f239ce48",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/shared/shared.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\n\n@NgModule({\n  declarations: [],\n  exports: [],\n})\nexport default class SharedModule {}\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": []
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": []
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    },
    {
      "name": "TableModule",
      "id": "module-TableModule-c3fefcfa96966da733dc133ca37d471db0468534be950d36bd1a7f66bba5c3f5cf137337ca51b05c49982d6c9cb9938f44ed4ac3e041ee4f8ab10e610c4fc676",
      "description": "",
      "deprecationMessage": "",
      "deprecated": false,
      "file": "src/app/common/table/table.module.ts",
      "methods": [],
      "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { TableComponent } from './table.component';\r\nimport { TableDirective } from './table.directive';\r\n\r\n@NgModule({\r\n  declarations: [TableComponent, TableDirective],\r\n  imports: [BrowserModule],\r\n  providers: [],\r\n  exports: [TableComponent, TableDirective]\r\n})\r\nexport class TableModule {}\r\n",
      "children": [
        {
          "type": "providers",
          "elements": []
        },
        {
          "type": "declarations",
          "elements": [
            {
              "name": "TableComponent"
            },
            {
              "name": "TableDirective"
            }
          ]
        },
        {
          "type": "imports",
          "elements": []
        },
        {
          "type": "exports",
          "elements": [
            {
              "name": "TableComponent"
            },
            {
              "name": "TableDirective"
            }
          ]
        },
        {
          "type": "bootstrap",
          "elements": []
        },
        {
          "type": "classes",
          "elements": []
        }
      ]
    }
  ],
  "miscellaneous": {
    "variables": [
      {
        "name": "Active",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/drop-down.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "Active",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button/boolean-button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Default.bind({})",
        "rawdescription": "История активного состояния",
        "description": "<p>История активного состояния</p>\n"
      },
      {
        "name": "Active",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button/default-button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Default.bind({})",
        "rawdescription": "Подтверждения",
        "description": "<p>Подтверждения</p>\n"
      },
      {
        "name": "Basic",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/drop-down.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "context",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button/boolean-button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<BooleanButtonComponent>",
        "defaultValue": "(args: BooleanButtonComponent) => ({\r\n  props: {\r\n    disableText: 'off',\r\n    activeText: 'on',\r\n    buttonType: args.buttonType,\r\n    action: args.action,\r\n    btnText: args.action ? args.activeText : args.disableText,\r\n  },\r\n})"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button/default-button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<DefaultButtonComponent>",
        "defaultValue": "(args: DefaultButtonComponent) => ({\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/button/select-button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<SelectButtonComponent>",
        "defaultValue": "(args: SelectButtonComponent) => ({\r\n  props: { options: args.options },\r\n})"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.prod.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: true\n}"
      },
      {
        "name": "environment",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/environments/environment.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  production: false\n}"
      },
      {
        "name": "Filtering",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/drop-down.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Template.bind({})"
      },
      {
        "name": "options",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/drop-down.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "[]",
        "defaultValue": "[\n  { id: 0, value: 'Vasia0' },\n  { id: 1, value: 'Vasia1' },\n  { id: 2, value: 'Vasia2' },\n  { id: 3, value: 'Vasia3' },\n  { id: 4, value: 'Vasia4' },\n  { id: 5, value: 'Vasia5' },\n  { id: 6, value: 'Vasia6' },\n  { id: 7, value: 'Vasia7' },\n  { id: 8, value: 'Vasia8' },\n]"
      },
      {
        "name": "require",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/test.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "literal type"
      },
      {
        "name": "showOptions",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/app/modules/drop-down/animations/show-options.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "trigger('openClose', [\n  state(\n    'open',\n    style({\n      opacity: '*',\n    }),\n  ),\n  state(\n    'closed',\n    style({\n      opacity: '0',\n    }),\n  ),\n  transition('open <=> closed', [animate('300ms')]),\n])"
      },
      {
        "name": "Template",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/stories/drop-down.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Story<DropDownComponent>",
        "defaultValue": "(args: DropDownComponent) => ({\n  props: {\n    options: args.options,\n    placeHolder: args.placeHolder,\n    active: args.active,\n    filter: args.filter,\n  },\n})"
      }
    ],
    "functions": [],
    "typealiases": [],
    "enumerations": [
      {
        "name": "ButtonType",
        "childs": [
          {
            "name": "default",
            "deprecated": false,
            "deprecationMessage": "",
            "value": ""
          },
          {
            "name": "access",
            "deprecated": false,
            "deprecationMessage": "",
            "value": "selected"
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/common/button/default-button/model/buttonType.enum.ts"
      },
      {
        "name": "KeyboardCodes",
        "childs": [
          {
            "name": "ArrowUP",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 38
          },
          {
            "name": "ArrowDown",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 40
          },
          {
            "name": "Escape",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 27
          },
          {
            "name": "Space",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 32
          },
          {
            "name": "Enter",
            "deprecated": false,
            "deprecationMessage": "",
            "value": 13
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "",
        "file": "src/app/shared/models/keyboard-key-codes.ts"
      },
      {
        "name": "ScrollDirection",
        "childs": [
          {
            "name": "top",
            "deprecated": false,
            "deprecationMessage": ""
          },
          {
            "name": "bottom",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "ctype": "miscellaneous",
        "subtype": "enum",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Направление сдвига ползунка прокрутки</p>\n",
        "file": "src/app/modules/drop-down/enums/scroll-direction.enum.ts"
      }
    ],
    "groupedVariables": {
      "src/stories/drop-down.stories.ts": [
        {
          "name": "Active",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/drop-down.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Basic",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/drop-down.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "Filtering",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/drop-down.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Template.bind({})"
        },
        {
          "name": "options",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/drop-down.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "[]",
          "defaultValue": "[\n  { id: 0, value: 'Vasia0' },\n  { id: 1, value: 'Vasia1' },\n  { id: 2, value: 'Vasia2' },\n  { id: 3, value: 'Vasia3' },\n  { id: 4, value: 'Vasia4' },\n  { id: 5, value: 'Vasia5' },\n  { id: 6, value: 'Vasia6' },\n  { id: 7, value: 'Vasia7' },\n  { id: 8, value: 'Vasia8' },\n]"
        },
        {
          "name": "Template",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/drop-down.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<DropDownComponent>",
          "defaultValue": "(args: DropDownComponent) => ({\n  props: {\n    options: args.options,\n    placeHolder: args.placeHolder,\n    active: args.active,\n    filter: args.filter,\n  },\n})"
        }
      ],
      "src/stories/button/boolean-button.stories.ts": [
        {
          "name": "Active",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button/boolean-button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Default.bind({})",
          "rawdescription": "История активного состояния",
          "description": "<p>История активного состояния</p>\n"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button/boolean-button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<BooleanButtonComponent>",
          "defaultValue": "(args: BooleanButtonComponent) => ({\r\n  props: {\r\n    disableText: 'off',\r\n    activeText: 'on',\r\n    buttonType: args.buttonType,\r\n    action: args.action,\r\n    btnText: args.action ? args.activeText : args.disableText,\r\n  },\r\n})"
        }
      ],
      "src/stories/button/default-button.stories.ts": [
        {
          "name": "Active",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button/default-button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Default.bind({})",
          "rawdescription": "Подтверждения",
          "description": "<p>Подтверждения</p>\n"
        },
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button/default-button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<DefaultButtonComponent>",
          "defaultValue": "(args: DefaultButtonComponent) => ({\r\n  props: {\r\n    ...args,\r\n  },\r\n})"
        }
      ],
      "src/test.ts": [
        {
          "name": "context",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
        },
        {
          "name": "require",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/test.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "literal type"
        }
      ],
      "src/stories/button/select-button.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/stories/button/select-button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Story<SelectButtonComponent>",
          "defaultValue": "(args: SelectButtonComponent) => ({\r\n  props: { options: args.options },\r\n})"
        }
      ],
      "src/environments/environment.prod.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.prod.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: true\n}"
        }
      ],
      "src/environments/environment.ts": [
        {
          "name": "environment",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/environments/environment.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  production: false\n}"
        }
      ],
      "src/app/modules/drop-down/animations/show-options.ts": [
        {
          "name": "showOptions",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/app/modules/drop-down/animations/show-options.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "trigger('openClose', [\n  state(\n    'open',\n    style({\n      opacity: '*',\n    }),\n  ),\n  state(\n    'closed',\n    style({\n      opacity: '0',\n    }),\n  ),\n  transition('open <=> closed', [animate('300ms')]),\n])"
        }
      ]
    },
    "groupedFunctions": {},
    "groupedEnumerations": {
      "src/app/common/button/default-button/model/buttonType.enum.ts": [
        {
          "name": "ButtonType",
          "childs": [
            {
              "name": "default",
              "deprecated": false,
              "deprecationMessage": "",
              "value": ""
            },
            {
              "name": "access",
              "deprecated": false,
              "deprecationMessage": "",
              "value": "selected"
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/common/button/default-button/model/buttonType.enum.ts"
        }
      ],
      "src/app/shared/models/keyboard-key-codes.ts": [
        {
          "name": "KeyboardCodes",
          "childs": [
            {
              "name": "ArrowUP",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 38
            },
            {
              "name": "ArrowDown",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 40
            },
            {
              "name": "Escape",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 27
            },
            {
              "name": "Space",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 32
            },
            {
              "name": "Enter",
              "deprecated": false,
              "deprecationMessage": "",
              "value": 13
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "",
          "file": "src/app/shared/models/keyboard-key-codes.ts"
        }
      ],
      "src/app/modules/drop-down/enums/scroll-direction.enum.ts": [
        {
          "name": "ScrollDirection",
          "childs": [
            {
              "name": "top",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "bottom",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "ctype": "miscellaneous",
          "subtype": "enum",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Направление сдвига ползунка прокрутки</p>\n",
          "file": "src/app/modules/drop-down/enums/scroll-direction.enum.ts"
        }
      ]
    },
    "groupedTypeAliases": {}
  },
  "routes": {
    "name": "<root>",
    "kind": "module",
    "className": "AppModule",
    "children": [
      {
        "name": "routes",
        "filename": "src/app/app-routing.module.ts",
        "module": "AppRoutingModule",
        "children": [],
        "kind": "module"
      }
    ]
  },
  "coverage": {
    "count": 35,
    "status": "medium",
    "files": [
      {
        "filePath": "src/app/app.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "AppComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/common/button/boolean-button/boolean-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "BooleanButtonComponent",
        "coveragePercent": 87,
        "coverageCount": "7/8",
        "status": "very-good"
      },
      {
        "filePath": "src/app/common/button/default-button/default-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DefaultButtonComponent",
        "coveragePercent": 80,
        "coverageCount": "4/5",
        "status": "very-good"
      },
      {
        "filePath": "src/app/common/button/select-button/model/option.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "Option",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/common/button/select-button/select-button.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "SelectButtonComponent",
        "coveragePercent": 75,
        "coverageCount": "6/8",
        "status": "good"
      },
      {
        "filePath": "src/app/common/filter/filter.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "FilterComponent",
        "coveragePercent": 71,
        "coverageCount": "5/7",
        "status": "good"
      },
      {
        "filePath": "src/app/common/table/table.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "TableComponent",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/common/table/table.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "TableDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/drop-down/animations/show-options.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "showOptions",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/drop-down/directives/auto-focus-out.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "AutoFocusOutDirective",
        "coveragePercent": 20,
        "coverageCount": "1/5",
        "status": "low"
      },
      {
        "filePath": "src/app/modules/drop-down/directives/auto-focus/auto-focus.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "AutoFocusDirective",
        "coveragePercent": 100,
        "coverageCount": "3/3",
        "status": "very-good"
      },
      {
        "filePath": "src/app/modules/drop-down/directives/auto-scroll-element/auto-scroll-element.directive.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "appAutoScrollElementDirective",
        "coveragePercent": 88,
        "coverageCount": "16/18",
        "status": "very-good"
      },
      {
        "filePath": "src/app/modules/drop-down/drop-down.component.ts",
        "type": "component",
        "linktype": "component",
        "name": "DropDownComponent",
        "coveragePercent": 92,
        "coverageCount": "23/25",
        "status": "very-good"
      },
      {
        "filePath": "src/app/modules/drop-down/interfaces/drop-down-options.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "DropDownOption",
        "coveragePercent": 100,
        "coverageCount": "4/4",
        "status": "very-good"
      },
      {
        "filePath": "src/app/modules/drop-down/interfaces/scroll-settings.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ScrollSettings",
        "coveragePercent": 100,
        "coverageCount": "5/5",
        "status": "very-good"
      },
      {
        "filePath": "src/app/modules/drop-down/interfaces/viewport-boundaries.interface.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "ViewportBoundaries",
        "coveragePercent": 100,
        "coverageCount": "3/3",
        "status": "very-good"
      },
      {
        "filePath": "src/app/modules/drop-down/services/drop-down.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DropDownService",
        "coveragePercent": 100,
        "coverageCount": "3/3",
        "status": "very-good"
      },
      {
        "filePath": "src/app/shared/data.service.ts",
        "type": "injectable",
        "linktype": "injectable",
        "name": "DataService",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/models/entity-name.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "EntityName",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/app/shared/models/table.model.ts",
        "type": "interface",
        "linktype": "interface",
        "name": "TableModel",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.prod.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/environments/environment.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "environment",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button/boolean-button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Active",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/button/boolean-button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button/default-button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Active",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/stories/button/default-button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/button/select-button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/drop-down.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Active",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/drop-down.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Basic",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/drop-down.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Filtering",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/drop-down.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "options",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/stories/drop-down.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Template",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "context",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/test.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "require",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
